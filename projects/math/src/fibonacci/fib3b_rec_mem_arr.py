"""Calculates the n element of the Fibonacci sequence.
The Fibonacci sequence:  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
Where F(0) = 0, F(1) = 1 and F(n) = F(n - 1) + F(n - 2) for n > 1.
So, each term greater than 1 is generated by adding the previous two terms.
For example, the 6th element of the sequence is 8.
It uses a dynamic programming memoized solution for a recursive approach using an array.
The array used for the memoization is declared of n + 1 integer elements
of type unsigned long ('L'), i.e. 32 bits, or unsigned long long ('Q'), i.e. 64 bits
when necessary.
Benchmarks function fib with the user created function time_it.
"""
__author__ = 'Joan A. Pinol  (japinol)'

import array as arr
import logging

from fibonacci.time_it import time_it


logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s: %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def fib_n(n, memo):
    if memo[n]:
        return memo[n]
    if n < 2:
        return n
    else:
        res = fib_n(n - 1, memo) + fib_n(n - 2, memo)
    memo[n] = res
    return res


def fib(n):
    if n < 0:
        return None
    res = None
    try:
        memo = arr.array('L' if n < 48 else 'Q', [0] * (n + 1))
        res = fib_n(n, memo)
    except Exception as e:
        logger.critical(f'Error: {e}')
    return res


if __name__ == '__main__':
    n = 35
    res = time_it(fib, n)
    print(f'fib({n}): {res}')
